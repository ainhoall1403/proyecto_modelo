# -*- coding: utf-8 -*-
"""PROYECTO_regresion.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ob0qUtQNkkKi10HqRdxwfovwZMuLcd2D
"""

# Importación de librerías necesarias
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# Carga del archivo CSV con los datos de ventas de videojuegos
videojuegos = pd.read_csv("Video_Games_Sales.csv")

# Visualización de las primeras filas del DataFrame
videojuegos.head()

# Verifica las dimensiones del DataFrame
videojuegos.shape

# Revisión de valores nulos por columna
videojuegos.isnull().sum()

# Eliminación de filas con valores nulos
videojuegos.dropna(inplace = True)

# Verificación nuevamente para asegurarse de que no queden valores nulos
videojuegos.isnull().sum()

# Importación de bibliotecas para visualización
import matplotlib.pyplot as plt
import seaborn as sns

# Gráfico de barras de los 30 videojuegos más vendidos a nivel global
plt.figure(figsize=(14, 8))
sns.barplot(x=videojuegos['Global_Sales'].head(30), y=videojuegos["Name"].head(30), palette="viridis")
plt.title("Ventas Globales de los Videojuegos Más Vendidos (en millones)", fontsize=16)
plt.xlabel("Ventas Globales (millones)")
plt.ylabel("Título del Videojuego")
plt.tight_layout()
plt.show()

# Gráfico de barras que muestra la venta global por género
plt.figure(figsize=(12, 6))
sns.barplot(x='Genre', y='Global_Sales', data=videojuegos, palette='viridis')
plt.title('Top-selling Genres')
plt.xlabel('Genre')
plt.ylabel('Global Sales (in millions)')
plt.xticks(rotation=45)
plt.show()

# Reimportación de librerías (ya fueron importadas antes, pero no afecta funcionalmente)
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import LabelEncoder

# Codificación de variables categóricas en valores numéricos
le_platform = LabelEncoder()
le_genre = LabelEncoder()
le_publisher = LabelEncoder()

videojuegos['Platform'] = le_platform.fit_transform(videojuegos['Platform'])
videojuegos['Genre'] = le_genre.fit_transform(videojuegos['Genre'])
videojuegos['Publisher'] = le_publisher.fit_transform(videojuegos['Publisher'])

# Definición de variables independientes (X) y variable dependiente (y)
X = videojuegos[['Platform', 'Year', 'Genre', 'Publisher', 'NA_Sales', 'JP_Sales', 'Other_Sales']]
y = videojuegos['EU_Sales']

# División del conjunto de datos en entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Creación del modelo de regresión basado en Bosque Aleatorio (Random Forest)
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Entrenamiento del modelo con los datos de entrenamiento
model.fit(X_train, y_train)

# Predicción con los datos de prueba
y_pred = model.predict(X_test)

# Cálculo del error cuadrático medio (MSE) y del coeficiente de determinación R²
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Impresión de las métricas de evaluación
print(f"Error cuadrático medio (MSE): {mse}")
print(f"Coeficiente de determinación (R²): {r2}")

# Diccionario con las características de un nuevo videojuego para realizar predicción
nuevo_juego = {
    'Platform': 'PC',
    'Year': 2025,
    'Genre': 'Action',
    'Publisher': 'Capcom',
    'NA_Sales': 10.0,
    'JP_Sales': 2.5,
    'Other_Sales': 5.3
}

# Conversión del diccionario a DataFrame
nuevo_df = pd.DataFrame([nuevo_juego])

# Transformación de las variables categóricas del nuevo juego
nuevo_df['Platform'] = le_platform.transform(nuevo_df['Platform'])
nuevo_df['Genre'] = le_genre.transform(nuevo_df['Genre'])
nuevo_df['Publisher'] = le_publisher.transform(nuevo_df['Publisher'])

# Predicción de las ventas en Europa para el nuevo videojuego
prediccion = model.predict(nuevo_df)
print(f"Predicción de ventas en Europa: {prediccion[0]:.2f} millones")
