# -*- coding: utf-8 -*-
"""redesneuronales.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MtGZApLnqLKIwZWRP6Yc2DXAoiEh6d7X
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import mean_squared_error, r2_score

videojuegos = pd.read_csv("Video_Games_Sales.csv")
videojuegos.dropna(inplace=True)

le_platform = LabelEncoder()
le_genre = LabelEncoder()
le_publisher = LabelEncoder()

videojuegos['Platform'] = le_platform.fit_transform(videojuegos['Platform'])
videojuegos['Genre'] = le_genre.fit_transform(videojuegos['Genre'])
videojuegos['Publisher'] = le_publisher.fit_transform(videojuegos['Publisher'])

X = videojuegos[['Platform', 'Year', 'Genre', 'Publisher', 'NA_Sales', 'JP_Sales', 'Other_Sales']]
y = videojuegos['EU_Sales']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

import tensorflow as tf
from tensorflow import keras

model = tf.keras.Sequential([
    tf.keras.layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(1)
])

model.compile(optimizer='adam', loss='mse', metrics=['mae'])

history = model.fit(X_train, y_train, epochs=20, batch_size=32, validation_split=0.2, verbose=1)

y_pred_nn = model.predict(X_test).flatten()

mse_nn = mean_squared_error(y_test, y_pred_nn)
r2_nn = r2_score(y_test, y_pred_nn)

print(f"Error cuadrático medio (MSE) - Red Neuronal: {mse_nn}")
print(f"Coeficiente de determinación (R²) - Red Neuronal: {r2_nn}")

nuevo_juego = {
    'Platform': 'PC',
    'Year': 2025,
    'Genre': 'Action',
    'Publisher': 'Capcom',
    'NA_Sales': 15.0,
    'JP_Sales': 2.5,
    'Other_Sales': 10.3
}

nuevo_df = pd.DataFrame([nuevo_juego])
nuevo_df['Platform'] = le_platform.transform(nuevo_df['Platform'])
nuevo_df['Genre'] = le_genre.transform(nuevo_df['Genre'])
nuevo_df['Publisher'] = le_publisher.transform(nuevo_df['Publisher'])

nuevo_df_scaled = scaler.transform(nuevo_df)

prediccion_nn = model.predict(nuevo_df_scaled)
print(f"Predicción de ventas en Europa (red neuronal): {prediccion_nn[0][0]:.2f} millones")